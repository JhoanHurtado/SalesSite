pipeline {
        agent any
    parameters {
            string(name: 'name_container', defaultValue: 'salessiteweb', description: 'nombre del contenedor')
            string(name: 'name_imagen', defaultValue: 'salessiteweb', description: 'nombre de la image')
            string(name: 'tag_imagen', defaultValue: 'latest', description: 'etiqueta de la imagen')
            string(name: 'puerto_imagen', defaultValue: '4550', description: 'puerto a publicar')
        }
        environment{
            name_final = "${name_container}${tag_imagen}${puerto_imagen}"
            DOCKER_EXIST = ''
        }
        stages{
            stage('CheckOut'){
                when{
                    expression{
                        DOCKER_EXIST = sh(returnStdout: true, script: 'echo "$(docker ps -q --filter name=${name_final})"')
                        return DOCKER_EXIST != ''
                    }
                }
                steps {
                    script{
                    if(DOCKER_EXIST != ''){
                        script{
                          sh '''
                              echo "ererrr  $DOCKER_EXIST"
                            ''' 
                            sh '''
                                docker stop ${name_final}
                            '''
                            sh '''
                                docker rm -f ${DOCKER_EXIST}
                            '''
                         }
                    }
                }
            }
        }
        stage('build'){
            steps{
                script{
                    sh '''  
                    docker image build -t ${name_imagen}:${tag_imagen} -f ./SalesSite.Web/Dockerfile .
                    '''
                }
            }
        }
        stage('Deploy'){
            steps{
                script{
                    sh'''
                    docker container run --name ${name_final} -d -p ${puerto_imagen}:80 ${name_imagen}:${tag_imagen}
                    '''
                }
            }
        }
    }
}
